'''
The line of x's is to make searching a little harder...
'''

'''
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Problem 1 
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
If we list all the natural numbers below 10 that are 
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of 
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
these multiples is 23.
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Find the sum of all the multiples of 3 or 5 below 1000.
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
'''

sum = 0

for x in range(0, 1000):
  if ((x%3) == 0):
    sum = sum + x
  elif ((x%5) == 0):
    sum = sum + x

print("answer: " , sum)

'''
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Problem 2 
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Each new term in the Fibonacci sequence is generated by
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
adding the previous two terms. By starting with 1 and 2,
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
the first 10 terms will be:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
By considering the terms in the Fibonacci sequence whose
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
values do not exceed four million, find the sum of the
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
even-valued terms.
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
'''

sum_of_evens = 2
numOne = 1
numTwo = 2
fib_num = 0

while ((numOne + numTwo) < 4000000):
  fib_num = numOne + numTwo
  if ((fib_num % 2) == 0) :
    sum_of_evens += fib_num
  numOne = numTwo
  numTwo = fib_num
  
print("answer: " , sum_of_evens)
  
  
'''
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Problem 3 
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
The prime factors of 13195 are 5, 7, 13 and 29.
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
What is the largest prime factor of the number 
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
600851475143 ?
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
'''

import sys
import math

def is_factor_prime(list_of_numbers, factor):
  is_prime = False
  for y in list_of_numbers:
    if ((factor % y) == 0):
      return is_prime
  is_prime = True
  return is_prime

def find_largest_prime_factor(num):
  
  found_largest_prime = False
  largest_prime = 0
  list_of_numbers = []
  square_root = int(math.sqrt(num))

  while (found_largest_prime == False):

    for x in range(3, square_root, 2):
      if ((num % x) == 0):
        factor = x
        factor_prime = is_factor_prime(list_of_numbers, factor)
        if (factor_prime == True):
          largest_prime = factor
      list_of_numbers.append(x)
      found_largest_prime = True
  return largest_prime

print(find_largest_prime_factor(600851475143), "!")

'''
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Problem 4
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
A palindromic number reads the same both ways. The 
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
largest palindrome made from the product of two 2-digit
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
numbers is 9009 = 91 Ã— 99.
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Find the largest palindrome made from the product of 
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
two 3-digit numbers.
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
'''
